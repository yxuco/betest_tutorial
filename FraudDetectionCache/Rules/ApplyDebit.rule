/**
 * @description Debits the matching account by the specified amount
 * @author 
 */
rule Rules.ApplyDebit {
	attribute {
		priority = 1;
		forwardChain = true;
	}
	declare {
		Events.Debit	debit;
		Concepts.Account	account;
	}
	when {
		//Checks whether the extId of an Account instance in working memory  
		//matches the incoming event's account ID
		account@extId == debit.AccountId;
	}
	then {
		Object logger = Log.getLogger("Rules.ApplyDebit");
		Log.log(logger, "info", "Start acctId=" + debit.AccountId + " amount=" + debit.Amount);
		
		//If Account Status is not Suspended, debits the account
		if (account.Status != "Suspended") {
	       	account.Debits = debit.Amount;
	       	Log.log(logger, "info", "#### Debiting account " + account@extId + " by $" + debit.Amount);
	       	account.Balance = account.Balance - debit.Amount;
	       	Log.log(logger, "info", "#### New balance: $" + account.Balance);
	    }
		else {
	       	Log.log(logger, "info", "#### Cannot debit the suspended account " + account@extId);
		}
		
		Event.consumeEvent(debit);
		Log.log(logger, "info", "Completed acctId=" + debit.AccountId + " amount=" + debit.Amount);
	}

}