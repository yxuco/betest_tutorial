/**
 * @description execute rule BadCreateAccount in rule context. Note: setupBadCreateAccount must be executed before this invocation.
 */
void rulefunction Test.RuleContextTests.testBadCreateAccount {
	attribute {
		validity = ACTION;
	}
	scope {
		
	}
	body {
        String acctId = "BadCreateAccount2";

        Object logger = Log.getLogger("Test.RuleContextTests.testBadCreateAccount");
        Log.log(logger, "info", "Start acctId=" + acctId);
        
		// load account and assert to wm for rule execution
		// this concept must be created during setup stage before this test
		Concepts.Account acct = Cluster.DataGrid.CacheLoadConceptByExtId(acctId, true);
		assertThat("Account must be setup before this test execution",
				acct, notNullValue());
		Log.log(logger, "info", "Loaded account: acctId=" + acctId);		

		// create new account event        
        Events.CreateAccount evt = Events.CreateAccount.CreateAccount(
            null /*extId String */,
            null /*payload String */,
            acctId /*AccountId String */,
            2000 /*AvgMonthlyBalance double */,
            20000 /*Balance double */);
		Log.log(logger, "info", "Created new account event: acctId=" + acctId);
        
		// invoke one rule, and return array of matching scope tuples.
		Object[] result = Engine.invokeRule(
			"/Rules/BadCreateAccount",
			Object[]{evt},
			true /*enable dirty read */);
			
		// verify the returned results
		Log.log(logger, "info", "Rule returned %d matching tuples", result@length);
		assertThat("One account is unsuspended", 
			result@length, equalTo(1));
		for (int i = 0; i < result@length; i++) {
			Object[] objs = result[i];
			assertThat("Rule matched tuple must not be null",
				objs, notNullValue());
			assertThat("Rule matched tuple must contain 2 objects",
				objs@length, equalTo(2));
			assertThat("2nd object in matched tuple must be a Concepts.Account",
				objs[1], instanceOf("/Concepts/Account"));
			
			Concepts.Account iAcct = objs[1];
			assertThat("Account Id matches event", iAcct@extId, equalTo(acctId));
        	assertThat("Account status is set", iAcct.Status, equalTo("Suspended"));
		}
        
        Log.log(logger, "info", "Completed acctId=" + acctId);       		
	}
}