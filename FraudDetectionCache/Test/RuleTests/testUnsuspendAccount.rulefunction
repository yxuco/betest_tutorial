/**
 * @description
 */
void rulefunction Test.RuleTests.testUnsuspendAccount {
	attribute {
		validity = ACTION;
	}
	scope {
		
	}
	body {
        Object logger = Log.getLogger("Test.RuleTests.testUnsuspendAccount");
        Log.log(logger, "info", "Start Test.RuleTests.testUnsuspendAccount");
        
        String acctId = "UnsuspendAccount";
        cleanupAccount(acctId);
        
        // create account for the test
        Concepts.Account.Account(
            acctId /*extId String */,
            20000 /*Balance double */,
            0 /*Debits double */,
            "Suspended" /*Status String */,
            2000 /*AvgMonthlyBalance double */);
        Engine.executeRules();
        
        // load account into working memory
        Account acct = Cluster.DataGrid.CacheLoadConceptByExtId(acctId, true);
        Unsuspend evt = Events.Unsuspend.Unsuspend(
            null /*extId String */,
            null /*payload String */,
            acctId /*AccountId String */);
            
        // execute all rules for debit event, but only the UnsuspendAccount rule will be triggered
        Event.assertEvent(evt);
        Engine.executeRules();
        
        // reload updated account to verify the update
        acct = Cluster.DataGrid.CacheLoadConceptByExtId(acctId, true);
        assertNotNull(String.format("Account %s exists", acctId), acct);
        assertThat("Account status is set", acct.Status, equalTo("Normal"));
       
        Log.log(logger, "info", "Completed Test.RuleTests.testUnsuspendAccount");		
	}
}