/**
 * @description
 */
void rulefunction Test.RuleTests.testUnsuspendAccount {
	attribute {
		validity = ACTION;
	}
	scope {
		
	}
	body {
        String acctId = "UnsuspendAccount";

        Object logger = Log.getLogger("Test.RuleTests.testUnsuspendAccount");
        Log.log(logger, "info", "Start acctId=" + acctId);

        cleanupAccount(acctId);
        
        // create account for the test
        Concepts.Account.Account(
            acctId /*extId String */,
            20000 /*Balance double */,
            0 /*Debits double */,
            "Suspended" /*Status String */,
            2000 /*AvgMonthlyBalance double */);
 		Log.log(logger, "info", "Created suspended account: acctId=" + acctId);
        Engine.executeRules();
        
        // create unsuspend event
        Unsuspend evt = Events.Unsuspend.Unsuspend(
            null /*extId String */,
            null /*payload String */,
            acctId /*AccountId String */);
		Log.log(logger, "info", "Created unsuspend event: acctId=" + acctId);

        // call preprocessor
        PreProcessor(evt);
                    
        // execute all rules for debit event, but only the UnsuspendAccount rule will be triggered
        Event.assertEvent(evt);
		Log.log(logger, "info", "Assert unsuspend event: acctId=" + acctId);
        Engine.executeRules();
        
        // reload updated account to verify the update
		Log.log(logger, "info", "Verify account is unsuspended: acctId=" + acctId);
        Account acct = Cluster.DataGrid.CacheLoadConceptByExtId(acctId, true);
        assertNotNull(String.format("Account %s exists", acctId), acct);
        assertThat("Account status is set", acct.Status, equalTo("Normal"));
       
        Log.log(logger, "info", "Completed acctId=" + acctId);		
	}
}